# syntax=docker/dockerfile:1

FROM node:alpine as build

WORKDIR /app

# wget embedding model weight from alpine (does not exist from slim-buster)
RUN wget "https://chroma-onnx-models.s3.amazonaws.com/all-MiniLM-L6-v2/onnx.tar.gz"

COPY package.json package-lock.json ./ 
RUN npm ci

COPY . .
RUN npm run build


FROM python:3.11-slim-bookworm as base


EXPOSE 8888

ARG USER_ID=1000
ARG USERS_GID=100
ARG USER=agent

RUN apt-get update && apt-get install -y \
	curl nano vim git ssh lshw wget net-tools iputils-ping sudo \
	zsh git-lfs \
    postgresql-client \
	&& apt-get clean \
	&& rm -rf /var/lib/apt/lists/*

RUN useradd -m ${USER} --uid=${USER_ID} &&  \
	echo "${USER} ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers && \
	adduser ${USER} users && adduser ${USER} sudo && \
	usermod --shell /usr/bin/bash ${USER} 

# RUN chmod 644 /usr/lib/sudo/sudoers.so && chown -R root /usr/lib/sudo && chown -R root:root /etc/sudoers


RUN pip3 install --upgrade pip && pip3 install Django django-extensions django-admin-tools django-taggit \
    django-taggit-autosuggest django-taggit-serializer djangorestframework django-utils-six \
    django-googledrive-storage djangocms_text_ckeditor django-ckeditor django-filter django-advanced-filters \
    django-filer django-filebrowser-no-grappelli django-ckeditor-filebrowser-filer django-sekizai \
    django-imagekit django-environ django_resized django-jet-reboot \
	psycopg PyPDF2 jsonpatch numexpr Hypercorn spacy openai langchain \
	gunicorn sqlalchemy pandas pyarrow fastparquet redis celery \
	langsmith opensearch-py pymilvus nltk llama-index

RUN sh -c "$(wget -O- https://github.com/deluan/zsh-in-docker/releases/download/v1.1.5/zsh-in-docker.sh)"

ENV ENV=prod

ENV OLLAMA_API_BASE_URL "/ollama/api"

ENV OPENAI_API_BASE_URL ""
ENV OPENAI_API_KEY ""

ENV WEBUI_JWT_SECRET_KEY "SECRET_KEY"

USER ${USER}
WORKDIR /home/${USER}

# WORKDIR /app

# copy embedding weight from build
# RUN mkdir -p /root/.cache/chroma/onnx_models/all-MiniLM-L6-v2
# COPY --from=build /app/onnx.tar.gz /root/.cache/chroma/onnx_models/all-MiniLM-L6-v2

# RUN cd /root/.cache/chroma/onnx_models/all-MiniLM-L6-v2 &&\
#     tar -xzf onnx.tar.gz

# copy built frontend files
COPY --from=build /app/build /app/build

WORKDIR /app/backend

COPY ./backend/requirements.txt ./requirements.txt

RUN pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
RUN pip3 install -r requirements.txt

# RUN python -c "from sentence_transformers import SentenceTransformer; model = SentenceTransformer('all-MiniLM-L6-v2')"

COPY ./backend .

CMD [ "sh", "start.sh"]